/*
 * pedidos.c
 *
 *  Created on: 10 oct. 2019
 *      Author: alumno
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "clientes.h"
#include "pedidos.h"
#include "utn.h"

int initPedidos(ePedidos* list, int len)
{

	int i;
	    int ret= -1;
	    if(list!=NULL&&len>0)
	    {
	        for(i=0;i<len;i++)
	        {
	        	list[i].idPedidos=0;
	            list[i].idClientes=0;
	            list[i].kilos=0;
	            list[i].estado=0;
	            list[i].tiposResiduos=0;
	            list[i].isEmpty = 0;


	        }
	        ret=0;
	    }
	    return ret;
}

int findEmptySpacePedidos(ePedidos* list, int len)
{
    int ret = -1;
    int i;

    for (i=1; i<len; i++)
    {
        if (list[i].isEmpty == 0)
        {
            ret = i;
            break;
        }
    }
    return ret;
}

int existPedidos(ePedidos* list, int len)
{
	int ret = -1;
    int i;

    for( i = 0; i < len; i++)
    {
        if(list[i].isEmpty == 1)
        {
            ret = 0;
        }
    }
    return ret;
}

int llamadas_findNextId(ePedidos* list, int length)
{
    int i, maxId=-1;
    int retorno=-1;
    if(list != NULL && length > 0)
    {
        for(i=0;i<length;i++)
        {
            if(list[i].isEmpty == 1 )
            {
                if(list[i].idPedidos > maxId || maxId == -1)
                    maxId = list[i].idPedidos;
            }
        }
        retorno = maxId+1;
    }
    return retorno;
}

int addPedidos(ePedidos* list, int len, int id, float kilos, int estado , int tiposResiduos, eClientes* list, int idClientes)
{
	int retorno=-1;
	    int id,index;
	    if(list != NULL && len > 0)
	    {
	        index = findEmptySpacePedidos(list, len);
	        if(index != -1)
	        {
	            id = findNextId(list, len);
	            (pLlamadas+index)->estado = ENCURSO;
	            (pLlamadas+index)->idLlamada = id;
	            (pLlamadas+index)->idAbonado = idAbonado;
	            (pLlamadas+index)->motivo = motivo;
	            (pLlamadas+index)->tiempo = 0;
	            (pLlamadas+index)->flagEstado = LLAMADA_USED;
	            retorno=0;
	        }
	    }
	    return retorno;
}
int controllerGetClientes(eClientes* list, int len)
{
	char auxNombreEmp[50];
	char auxCuit[13];
	char auxDireccion[50];
	char auxLocalidad[50];
	int ret = -1;
	int espacioLibre;
	espacioLibre = findEmptySpaceClientes(list,len);

	if(espacioLibre != -1)
	{
		utn_getName("\nIngrese Nombre de la Empresa: ","\nNo es un nombre valido",1,50,3,auxNombreEmp);
		utn_getCUIT("\nIngrese Cuit del cliente: ","\nNo es un cuit valido",3,auxCuit);
		utn_getName("\nIngrese direccion del cliente: ","\nNo es una direccion valido",1,50,3,auxDireccion);
		utn_getName("\nIngrese localidad del cliente: ","\nNo es una localidad valido",1,50,3,auxLocalidad);

		addClientes(list, len, espacioLibre, auxNombreEmp, auxCuit, auxDireccion, auxLocalidad);
	}
	else
	{
		printf("No se pueden cargar mas clientes ");
	}
	return ret;
}

int modificarClientes(eClientes* list, int len)
{
    int ret = -1;
    int modify;
    int findClientes;
    char auxDireccion[50];
    char auxLocalidad[50];
    int id;

    printf("Ingrese ID del cliente a modificar: ");
    scanf("%d", &id);

    findClientes = findClientesById(list, len, id);

    if (findClientes > 0)
    {
        do
        {
            printf("\n---------------------------------------- \n");
            printf("1- Direccion \n2- Localidad \n3- Salir  \n");
            printf("------------------------------------------ \n");
            scanf("%d", &modify);

            switch(modify)
            {
            case 1:
            	utn_getName("\nIngrese direccion del cliente: ","\nNo es una direccion valido",1,50,3,auxDireccion);
                strcpy(list[findClientes].direccion, auxDireccion);
                break;
            case 2:
            	utn_getName("\nIngrese localidad del cliente: ","\nNo es una localidad valido",1,50,3,auxLocalidad);
                strcpy(list[findClientes].localidad, auxLocalidad);
                break;
            default:
                printf("Ingrese una opcion del 1 al 3: ");
            }
        }while (modify != 3);

        printf("Se han realizado las modificaciones correctamente \n");
    }
    else
    {
        printf("No se encontro Cliente con ese ID \n");
    }
   return ret;
}

int findPedidosById(eClientes* list, int len, int id)
{
    int ret = -1;
    int i;

    if (list != NULL && len > 0)
    {
        for (i=1; i<len; i++)
        {
            if (list[i].isEmpty == 1 && list[i].idClientes == id)
            {
                return i;
            }
        }
    }
    return ret;
}

int removeClientes (eClientes* list, int len, int id)
{
    int findEmployee;

    findEmployee = findClientesById(list, len, id);

    if (findEmployee > 0)
    {
        list[findEmployee].isEmpty = -1;
        printf("Empleado eliminado con exito \n");
    }
    else
    {
        printf("No se ha encontrado empleado con ese ID \n");
    }

    return findEmployee;
}

int getDeleteClientes(eClientes* list,int len)
{
    int ret=-1;
    int auxId;
    utn_getUnsignedInt("\nIngrese id: ","\nValor invalido",1,sizeof(int),0,100,10,&auxId);
    if(findClientesById(list,len,auxId)>=0)
    {
        removeClientes(list,len,auxId);
        ret=0;
    }
    else
    {
        printf("\nId invalido");
    }
    return ret;
}


int printClientes (eClientes* list, int len)
{
    int ret = -1;
    int i;

    if(len > 0)
    {
        printf("ID\tNombre Empresa\t\tCuit\t\tDomicilio\t\tLocalidad \n");

        for(i=0; i<len; i++)
        {
            if (list[i].isEmpty == 1)
            {

                printf("%d\t%s\t\t%s\t\t\t%s\t\t%s \n", list[i].idClientes,
                										list[i].nombreEmpresa,
                										list[i].cuit,
														list[i].direccion,
														list[i].localidad);
            }
        }
        ret = 0;
    }
    return ret;
}

